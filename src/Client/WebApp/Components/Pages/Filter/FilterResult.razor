@page "/filters-result/{ItemTypeId:int?}"
@using WebComponent.Components.Filter
@inject NavigationManager Navigation
@inject IFilterService FilterService
@inject ICatalogService CatalogService
<div class="container">
    <div class="search-bar-container">
        <div class="search-bar">
            <input type="text" placeholder="Search...">
            <button type="submit">
                <img src="assets/icons/search.png" alt="Search">
            </button>
        </div>
    </div>

    <div class="filter-sort-container">
        <button class="filter-button">
            <a href="/filters" class="filter-link">
                <span>Filter</span>
                <img src="assets/icons/filter.png" alt="Filter">
            </a>
        </button>

        <span class="divider"></span>
        <button class="sort-button" @onclick="ShowPopup">
            <span>Sort by</span>
            <img src="assets/icons/sorting.png" alt="Sort">
        </button>
        @if (isPopupVisible)
        {
            <div class="overlay">
                <div class="popup">
                    <h2>Sort by</h2>
                    <button class="close" @onclick="HidePopup">&times;</button>
                    <div class="options">
                        <label>
                            <input type="radio" name="sort" value="Latest"
                                   @onchange="(e) => OnOptionChanged(e.Value?.ToString())"
                                   checked="@(selectedOption == "Latest")" />
                            Latest
                        </label>
                        <label>
                            <input type="radio" name="sort" value="HighToLow"
                                   @onchange="(e) => OnOptionChanged(e.Value?.ToString())"
                                   checked="@(selectedOption == "HighToLow")" />
                            Price: High to Low
                        </label>
                        <label>
                            <input type="radio" name="sort" value="LowToHigh"
                                   @onchange="(e) => OnOptionChanged(e.Value?.ToString())"
                                   checked="@(selectedOption == "LowToHigh")" />
                            Price: Low to High
                        </label>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="product-grid">
    <!-- Conditional Rendering for Product List -->
    @if (ItemTypeId.HasValue && ItemTypeId > 0)
    {
        <div class="product-grid">
            <ProductListByType ItemTypeId="ItemTypeId.Value" />
        </div>
    }
    else if (Products != null && Products.Any())
    {
        <div class="product-grid">
            <ProductListByFilter Products="Products" />
        </div>
    }
    else
    {
        <div class="product-grid">
            <p>No products found. Please apply some filters or select a category.</p>
        </div>
    }
</div>

@code {
    private bool isPopupVisible = false;
    private string selectedOption = "Latest"; // Default selected option
    private List<CatalogItem> Products { get; set; } = new();
    [Parameter]
    public int? ItemTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParameters.HasKeys())
        {
            var selectedFilters = new CompositeFilterDto
                {
                    Material = queryParameters["Material"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                    Metal = queryParameters["Metal"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                    Occasion = queryParameters["Occasion"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                    Style = queryParameters["Style"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>()
                };

            Products = (await FilterService.FilterCatalogItemsAsync(selectedFilters)).ToList();
        }
    }

    private void ShowPopup()
    {
        isPopupVisible = true;
    }

    private void HidePopup()
    {
        isPopupVisible = false;
    }

    private void OnOptionChanged(string? option)
    {
        if (!string.IsNullOrEmpty(option))
        {
            selectedOption = option;
            Console.WriteLine($"Selected option: {selectedOption}");
            HidePopup(); // Optional: Close the popup after selecting an option
        }
    }
}
