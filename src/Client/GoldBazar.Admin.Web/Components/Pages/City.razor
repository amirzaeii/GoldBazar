@page "/cities"
@inject RegionService regionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout CRUDLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">City Directory</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox"
                           Size="Size.Large" Class="ml-auto" OnClick="(() => ModifyCityDialog(new CityDTO()))">
                    New City
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="CityDTO"
                             Items="@cities"
                             Loading="@_loading"
                             Hover="true"
                             ReadOnly="true"
                             Class="elevation-1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mud-primary-text">
                            Cities (@cities.Length)
                        </MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="City Name" />

                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => ModifyCityDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => DeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="CityDTO" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private CityDTO[] cities = default!;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
        => await LoadCities();

    private async Task LoadCities()
    {
        try
        {
            _loading = true;
            cities = await regionService.GetCities();
        }
        catch
        {
            Snackbar.Add("Failed to load Cities", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ModifyCityDialog(CityDTO city)
    {
        var parameters = new DialogParameters
        {
            {"City" , city},
            {"Title" , city.Id == 0 ? "Create New City" : $"Edit City: {city.Name}" },
            {"OnSave", new Func<CityDTO, Task>(OnModifyCity) }
        };
        var dialog = await DialogService.ShowAsync<ModifyCity>("Modify City", parameters);
    }

    private async Task DeleteDialog(int cityId)
    {
        var parameters = new DialogParameters
        {
            {"Id" , cityId },
            {"Message" , "Are you sure you want to delete this city?" },
            {"OnDelete", new Func<int, Task>(OnDeleteCity) }
        };
        var dialog = await DialogService.ShowAsync<DeleteConfirmation>(
            "Confirm Deletion",
            parameters
        );
    }

    public async Task OnModifyCity(CityDTO city)
    {
        CityDTO? result;

        if (city.Id == 0)
        {
          
            result = await regionService.AddCity(city);
            if (result is not null && result.Id > 0)
            {
               
                cities = cities.Append(result).ToArray();
                Snackbar.Add("City created successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to create city", Severity.Error);
            }
        }
        else
        {
        
            result = await regionService.UpdateCity(city);
            if (result is not null)
            {
               
                cities = cities
                    .Select(c => c.Id == result.Id ? result : c)
                    .ToArray();
                Snackbar.Add("City updated successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update city", Severity.Error);
            }
        }

        StateHasChanged();
    }

    public async Task OnDeleteCity(int id)
    {
        var result = await regionService.DeleteCity(id);
        if (result)
        {
            cities = cities.Where(w => w.Id != id).ToArray();
            Snackbar.Add("City deleted successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("City deleted failed", Severity.Error);
        }
        StateHasChanged();
    }

}