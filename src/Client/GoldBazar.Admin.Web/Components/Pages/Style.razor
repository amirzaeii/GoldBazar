@page "/styles"
@using GoldBazar.Admin.Web.Components.Comp
@using GoldBazar.Admin.Web.Components.Dialogs
@using GoldBazar.Admin.Web.Extensions
@using GoldBazar.Shared.DTOs
@using GoldBazar.Shared.Components.Services
@inject CatalogService CatalogService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout CRUDLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Style Directory</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox"
                           Size="Size.Large" Class="ml-auto" OnClick="OpenCreateDialog">
                    New Style
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="StyleDTO"
                             Items="@_styles"
                             Loading="@_loading"
                             Hover="true"
                             ReadOnly="true"
                             Class="elevation-1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mud-primary-text">
                            Styles (@_styles.Count)
                        </MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Style Name" />

                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => OpenEditDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => OpenDeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="StyleDTO" PageSizeOptions="new int[] {10, 25, 50, 100}" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<StyleDTO> _styles = new();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
        => await LoadStyles();

    private async Task LoadStyles()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            var result = await CatalogService.GetStyles();
            _styles = result
                .OrderBy(s => s.Name, StringComparer.OrdinalIgnoreCase)
                .ToList();
        }
        catch
        {
            Snackbar.Add("Failed to load styles", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateStyle>("Add New Style");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadStyles();
            Snackbar.Add("Style created successfully", Severity.Success);
        }
    }

    private async Task OpenEditDialog(StyleDTO style)
    {
        var parameters = new DialogParameters
            {
                ["Style"] = style,
                ["Title"] = $"Edit Style: {style.Name}"
            };
        var dialog = await DialogService.ShowAsync<EditStyle>("Edit Style", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadStyles();
            Snackbar.Add("Style updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(int styleId)
    {
        var parameters = new DialogParameters
            {

                ["StyleId"] = styleId,
                ["Message"] = "Are you sure you want to delete this style? This action cannot be undone."
            };


        var dialog = await DialogService.ShowAsync<DeleteStyle>(
            "Confirm Deletion",
            parameters
        );

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await CatalogService.DeleteStyle(styleId);
            await LoadStyles();
            Snackbar.Add("Style deleted successfully", Severity.Success);
        }
}
}