@page "/styles"
@using GoldBazar.Admin.Web.Components.Dialogs
@using GoldBazar.Shared.DTOs
@using GoldBazar.Shared.Components.Services
@inject CatalogService CatalogService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">Styles Management</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="AddStyle">
            <MudIcon Icon="@Icons.Material.Filled.Add" /> Add Style
        </MudButton>
    </MudStack>

    <MudTable Items="_styles"
              Loading="_isLoading"
              Elevation="1"
              Class="mt-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="() => EditStyle(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="() => ConfirmDelete(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private StyleDTO[] _styles = default!;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
      => await LoadStyles();

    private async Task LoadStyles()
    {
        _isLoading = true;
        _styles = await CatalogService.GetStyles();
        _isLoading = false;
    }

    private async Task AddStyle()
    {
        var parameters = new DialogParameters { ["Style"] = new StyleDTO(0, "") };
        var dialogRef = await DialogService.ShowAsync<StyleDialog>("Add Style", parameters);
        var result = await dialogRef.Result;

        if (!result.Canceled)
        {
            var newStyle = (StyleDTO)result.Data!;
            await CatalogService.AddStyle(newStyle);
            await LoadStyles();
        }
    }


    private async Task EditStyle(StyleDTO style)
    {
        var parameters = new DialogParameters { ["Style"] = new StyleDTO(style.Id, style.Name) };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogRef = await DialogService.ShowAsync<StyleDialog>("Edit Style", parameters, options);
        var result = await dialogRef.Result;

        if (!result.Canceled)
        {
            var updated = (StyleDTO)result.Data!;
            if (await CatalogService.UpdateStyle(updated))
            {
                Snackbar.Add("Style updated", Severity.Success);
                await LoadStyles();
            }
            else
            {
                Snackbar.Add("Failed to update style", Severity.Error);
            }
        }
    }

    private async Task ConfirmDelete(int id)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = "Are you sure you want to delete this style?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };
        var options = new DialogOptions { CloseButton = true };
        var dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialogRef.Result;

        if (!result.Canceled)
        {
            if (await CatalogService.DeleteStyle(id))
            {
                Snackbar.Add("Style deleted", Severity.Success);
                await LoadStyles();
            }
            else
            {
                Snackbar.Add("Failed to delete style", Severity.Error);
            }
        }
    }
}