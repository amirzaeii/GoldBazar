@page "/styles"
@inject CatalogService CatalogService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout CRUDLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Style Directory</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox"
                           Size="Size.Large" Class="ml-auto" OnClick="(() => ModifyStyleDialog(new StyleDTO()))">
                    New Style
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="StyleDTO"
                             Items="@styles"
                             Loading="@_loading"
                             Hover="true"
                             ReadOnly="true"
                             Class="elevation-1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mud-primary-text">
                            Styles (@styles.Length)
                        </MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Style Name" />

                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => ModifyStyleDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => DeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="StyleDTO" PageSizeOptions="new int[] {10, 25, 50, 100}" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private StyleDTO[] styles = default!;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
        => await LoadStyles();

    private async Task LoadStyles()
    {
        try
        {
            _loading = true;
            styles = await CatalogService.GetStyles();
        }
        catch
        {
            Snackbar.Add("Failed to load styles", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ModifyStyleDialog(StyleDTO style)
    {
        var parameters = new DialogParameters
        {
            {"Style" , style },
            {"Title" , style.Id == 0 ? "Create New Style" : $"Edit Style: {style.Name}" },
            {"OnSave", new Func<StyleDTO, Task>(OnModifyStyle) }
        };
        var dialog = await DialogService.ShowAsync<ModifyStyle>("Modify Style", parameters);
    }
      
    private async Task DeleteDialog(int styleId)
    {
        var parameters = new DialogParameters
        {
            {"Id" , styleId },
            {"Message" , "Are you sure you want to delete this style?" },
            {"OnDelete", new Func<int, Task>(OnDeleteStyle) }
        };
        var dialog = await DialogService.ShowAsync<DeleteConfirmation>(
            "Confirm Deletion",
            parameters
        );
    }

    public async Task OnModifyStyle(StyleDTO style)
    {
        var result = new StyleDTO();
        if(style.Id == 0){
            result = await CatalogService.AddStyle(style);
            if(result?.Id > 0) styles = styles.Append(result).ToArray();
              Snackbar.Add("Style updated successfully", Severity.Success);    
        }
        else{
            await CatalogService.EditStyle(style);
            Snackbar.Add("Style created successfully", Severity.Success);    
        }
        StateHasChanged();
    }
    public async Task OnDeleteStyle(int id)
    {
        var result = await CatalogService.DeleteStyle(id);
        if (result) {
            styles = styles.Where(w => w.Id != id).ToArray();
            Snackbar.Add("Style deleted successfully", Severity.Success);
        }
        else{
            Snackbar.Add("Style deleted failed", Severity.Error);
        }
        StateHasChanged();
    }

}