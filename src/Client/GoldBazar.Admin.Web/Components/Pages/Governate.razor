@page "/govs"
@inject RegionService regionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout CRUDLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Governorate Directory</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox"
                           Size="Size.Large" Class="ml-auto" OnClick="(() => ModifyGovernorateDialog(new GovernateDTO()))">
                    New Governorate
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="GovernateDTO"
                             Items="@govs"
                             Loading="@_loading"
                             Hover="true"
                             ReadOnly="true"
                             Class="elevation-1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mud-primary-text">
                            Governorates (@govs.Length)
                        </MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Governorate Name" />

                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => ModifyGovernorateDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   Class="mx-1"
                                                   OnClick="@(() => DeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="GovernateDTO" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private GovernateDTO[] govs = default!;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
        => await LoadGovernorate();

    private async Task LoadGovernorate()
    {
        try
        {
            _loading = true;
            govs = await regionService.GetGovernorates();
        }
        catch
        {
            Snackbar.Add("Failed to load Governorates", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ModifyGovernorateDialog(GovernateDTO gov)
    {
        var parameters = new DialogParameters
        {
            {"Governorate" , gov },
            {"Title" , gov.Id == 0 ? "Create New Governorate" : $"Edit Governorate: {gov.Name}" },
            {"OnSave", new Func<GovernateDTO, Task>(OnModifyGovernorate) }
        };
        var dialog = await DialogService.ShowAsync<ModifyGov>("Modify Governorate", parameters);
    }

    private async Task DeleteDialog(int govId)
    {
        var parameters = new DialogParameters
        {
            {"Id" , govId },
            {"Message" , "Are you sure you want to delete this Governorate?" },
            {"OnDelete", new Func<int, Task>(OnDeleteGovernorate) }
        };
        var dialog = await DialogService.ShowAsync<DeleteConfirmation>(
            "Confirm Deletion",
            parameters
        );
    }

    public async Task OnModifyGovernorate(GovernateDTO gov)
    {
        var result = new GovernateDTO();
        if (gov.Id == 0)
        {
            result = await regionService.AddGovernorate(gov);
            if (result?.Id > 0) govs = govs.Append(result).ToArray();
            Snackbar.Add("Governorate updated successfully", Severity.Success);
        }
        else
        {
            await regionService.UpdateGovernorate(gov);
            Snackbar.Add("Governorate edited successfully", Severity.Success);
        }
        StateHasChanged();
    }
    public async Task OnDeleteGovernorate(int id)
    {
        var result = await regionService.DeleteGovernorate(id);
        if (result)
        {
            govs = govs.Where(w => w.Id != id).ToArray();
            Snackbar.Add("Governorate deleted successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Governorate deleted failed", Severity.Error);
        }
        StateHasChanged();
    }

}