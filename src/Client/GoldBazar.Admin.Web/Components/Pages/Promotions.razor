@page "/promotions"
@using GoldBazar.Shared.DTOs
@using GoldBazar.Admin.Web.Components.Dialogs
@inject PromotionService promotionService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Promotions</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox"
                           Size="Size.Large" Class="ml-auto" OnClick="(() => ModifyPromotionDialog(new PromotionSliderDTO()))">
                    New Promotion
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="PromotionSliderDTO" Items="@_promotions" Loading="@_loading" Hover="true" ReadOnly="true"
                             Class="elevation-1">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mud-primary-text">
                            Promotions (@_promotions.Count())
                        </MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="ID" />
                        <PropertyColumn Property="x => x.Title" Title="Title" />
                        <PropertyColumn Property="x => x.Description" Title="Description" />
                        <PropertyColumn Property="x => x.Link" Title="Link" />
                        <PropertyColumn Property="x => x.Priority" Title="Priority" />
                        <TemplateColumn Title="Image">
                            <CellTemplate>
                                <MudImage Class="rounded" Style="width: 50px; height: 50px;" Src="@context.Item.ImageUrl" />
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                                   Size="Size.Small" Class="mx-1"
                                                   OnClick="@(() => ModifyPromotionDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                   Size="Size.Small" Class="mx-1"
                                                   OnClick="@(() => DeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="PromotionSliderDTO" PageSizeOptions="new int[] { 10, 25, 50 }" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

                                                   @code{
                                                    private IEnumerable<PromotionSliderDTO> _promotions;

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
        => await LoadPromotions();

    private async Task LoadPromotions()
    {
        try
        {
            _loading = true;
            _promotions = await promotionService.GetPromotions();
        }
        catch
        {
            Snackbar.Add("Failed to load Promotions", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ModifyPromotionDialog(PromotionSliderDTO promo)
    {
        var parameters = new DialogParameters
        {
            { "Promotion", promo },
            { "Title", promo.Id == 0 ? "Create Promotion" : $"Edit Promotion: {promo.Title}" },
            { "OnSave", new Func<PromotionSliderDTO, Task>(OnSavePromotion) }
        };

        await DialogService.ShowAsync<ModifyPromotions>("Modify Promotion", parameters);
    }

    private async Task DeleteDialog(int id)
    {
        var parameters = new DialogParameters
        {
            { "Id", id },
            { "Message", "Are you sure you want to delete this promotion?" },
            { "OnDelete", new Func<int, Task>(OnDeletePromotion) }
        };

        await DialogService.ShowAsync<DeleteConfirmation>("Confirm Deletion", parameters);
    }

    public async Task OnSavePromotion(PromotionSliderDTO promo)
    {
        if (promo.Id == 0)
        {
            var created = await promotionService.AddPromotion(promo);
            if (created != null)
                _promotions = _promotions.Append(created).ToArray();
            Snackbar.Add("Promotion created successfully", Severity.Success);
        }
        else
        {
            await promotionService.UpdatePromotion(promo);
            Snackbar.Add("Promotion updated successfully", Severity.Success);
        }

        StateHasChanged();
    }

    public async Task OnDeletePromotion(int id)
    {
        var result = await promotionService.DeletePromotion(id);
        if (result)
        {
            _promotions = _promotions.Where(p => p.Id != id).ToArray();
            Snackbar.Add("Promotion deleted successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to delete promotion", Severity.Error);
        }

        StateHasChanged();
    }
                                                   }
