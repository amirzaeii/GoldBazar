@inject CatalogService StyleService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="Metal">
            <MudTextField T="string"
                          Label="Metal Name"
                          Required="true"
                          RequiredError="Name is required!"
                          @bind-Value="Metal.Name" />

            <MudSelect T="int"
                       Label="Select Material"
                       Value="Metal.MaterialId"
                       ValueChanged="OnMaterialSelected"
                       Required="true"
                       RequiredError="Material is required">
                @foreach (var mat in Materials)
                {
                    <MudSelectItem Value="mat.Id">@mat.Name</MudSelectItem>
                }
            </MudSelect>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <MudText Color="Color.Error" Typo="Typo.caption">@ErrorMessage</MudText>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    private MudForm form = default!;
    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public MetalDTO Metal { get; set; } = default!;
    [Parameter][EditorRequired] public Func<MetalDTO, Task>? OnSave { get; set; }

    private List<MaterialDTO> Materials = new();
    private List<MetalDTO> ExistingMetals = new();
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Materials = (await StyleService.GetMaterials()).ToList();
        ExistingMetals = (await StyleService.GetMetals()).ToList();
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        ErrorMessage = string.Empty;
        await form.Validate();
        if (!form.IsValid) return;

        var exists = ExistingMetals.Any(m =>
            m.Name.Equals(Metal.Name.Trim(), StringComparison.OrdinalIgnoreCase)
            && m.MaterialId == Metal.MaterialId
            && m.Id != Metal.Id);

        if (exists)
        {
            ErrorMessage = $"The metal '{Metal.Name}' already exists for the selected material.(Change the Material)";
            return;
        }

        try
        {
            if (OnSave != null)
            {
                MudDialog.Close(DialogResult.Ok(true));
                await OnSave.Invoke(Metal);
            }
        }
        catch
        {
            Snackbar.Add("An unexpected error occurred while saving.", Severity.Error);
        }
    }

    private void OnMaterialSelected(int selectedId)
    {
        Metal.MaterialId = selectedId;
        var selectedMaterial = Materials.FirstOrDefault(m => m.Id == selectedId);
        Metal.MaterialName = selectedMaterial?.Name ?? string.Empty;
    }
}
