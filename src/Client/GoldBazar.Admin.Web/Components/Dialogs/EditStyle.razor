@using MudBlazor
@inject CatalogService StyleService
@inject ISnackbar Snackbar
@inject CatalogService StyleService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="model">
            <MudTextField T="string"
                          Label="Style Name"
                          Required="true"
                          RequiredError="Name is required!"
                          Value="model.Name"
                          ValueChanged="OnNameChanged"
                          ValueExpression="() => model.Name" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Update</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public StyleDTO Style { get; set; } = default!;

    private MudForm form = default!;
    private StyleDTO model = default!;

    protected override void OnInitialized()
    {
        model = Style;  
    }

    void Cancel()
      => MudDialog.Cancel();

    private Task OnNameChanged(string newName)
    {
        model = model with { Name = newName };
        return Task.CompletedTask;
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        try
        {
            await StyleService.UpdateStyle(model);
            Snackbar.Add("Style updated", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch
        {
            Snackbar.Add("Error updating style", Severity.Error);
        }
    }
}