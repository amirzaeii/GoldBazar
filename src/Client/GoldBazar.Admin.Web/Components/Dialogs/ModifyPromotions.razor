@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog MaxWidth="MaxWidth.Small" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @ref="form" Model="Promotion">
            <MudTextField T="string" Label="Title" @bind-Value="Promotion.Title" Required="true" />
            <MudTextField T="string" Label="Description" @bind-Value="Promotion.Description" />
            <MudTextField T="string" Label="Image URL" @bind-Value="Promotion.ImageUrl" />
            <MudTextField T="string" Label="Link" @bind-Value="Promotion.Link" />
            <MudNumericField T="int" Label="Priority" @bind-Value="Promotion.Priority" />
            <MudSwitch T="bool"
                       Label="Active"
                       @bind-Checked="Promotion.IsActive"
                       Color="Color.Success" />
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public PromotionSliderDTO Promotion { get; set; } = new();
    [Parameter, EditorRequired] public Func<PromotionSliderDTO, Task> OnSave { get; set; } = _ => Task.CompletedTask;

    private MudForm form = default!;

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        MudDialog.Close(DialogResult.Ok(true));
        try
        {
            await OnSave(Promotion);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving promotion: {ex.Message}", Severity.Error);
        }
    }
}
