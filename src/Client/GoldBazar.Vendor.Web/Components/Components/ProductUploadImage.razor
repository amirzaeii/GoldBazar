 <MudContainer Class="pa-5 mt-10">
    <MudPaper Class="pa-4">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" >
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload">
                        you can choose til (4) Images
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (Files != null)
            {
                <MudText Typo="@Typo.h6">@Files.Count() File@(Files.Count() == 1 ? "" : "s"):</MudText>
                <div class="image-upload-grid">
                    @foreach (var file in Files)
                    {
                        <div>
                            <MudImage Src="@file.PreviewUrl" Class="upload-preview" ></MudImage>
                        </div>
                    }
                </div>
            }
    </MudPaper>
</MudContainer>
@code{
    [Parameter] public IList<FileUploadDTO> Files { get; set; } = default!;  
    private async void UploadFiles(IBrowserFile file)
    {
        if (file != null && Files.Count < 4)
        {
            var fileUpload = new FileUploadDTO
            {
                File = file,
                Name = file.Name,
                ContentType = file.ContentType,
                Size = file.Size,
                PreviewUrl = await ResizeImage(file)
            };
            Files.Add(fileUpload);
            StateHasChanged();
           
        }
  }

    private async Task<string> ResizeImage(IBrowserFile file)
    {
         // Optional: limit size to avoid reading too much
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 500, 600);

            using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); // max 10 MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var bytes = ms.ToArray();
            return $"data:{file.ContentType};base64,{Convert.ToBase64String(bytes)}";
      
    }
    
}