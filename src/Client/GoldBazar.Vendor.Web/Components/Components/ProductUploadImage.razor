@using System.Net.Http.Headers
@using System.Text.Json
@inject IJSRuntime JS
@inject IImageService _imageService

<script src="js/imagePreview.js"></script>

<MudContainer Class="pa-5 mt-10">
    <MudPaper Class="pa-4">
        <div class="upload-box-main mb-2">
            <InputFile id="image-main" ref="InputFile1" class="upload-input" OnChange="UploadFile1" accept="image/*" />
            <label for="image-main" class="upload-box-icon">
                <img ref="previewImageElem1" src="" class="upload-preview">
            </label>
        </div>
        <div class="image-upload-grid ">
            <div class="upload-box">
                <InputFile id="image1" ref="InputFile2" class="upload-input" OnChange="UploadFile2" accept="image/*" />
                <label for="image1" class="upload-box-icon">
                    <img ref="previewImageElem2" src="" class="upload-preview">
                </label>
            </div>
            <div class="upload-box">
                <InputFile id="image2" ref="InputFile3" class="upload-input" OnChange="UploadFile3" accept="image/*" />
                <label for="image2" class="upload-box-icon">
                    <img ref="previewImageElem3" src="" class="upload-preview">
                </label>
            </div>
            <div class="upload-box">
                <InputFile id="image3" ref="InputFile4" class="upload-input" OnChange="UploadFile4" accept="image/*" />
                <label for="image3" class="upload-box-icon">
                    <img ref="previewImageElem4" src="" class="upload-preview">
                </label>
            </div>
        </div>

    </MudPaper>
</MudContainer>
@code {
    [Parameter] public IList<FileUploadDTO> Files { get; set; } = default!;
    UploadResult[] uploadResults = new UploadResult[4];
    private InputFile? inputFile1;
    private ElementReference previewImageElem1;
    private InputFile? inputFile2;
    private ElementReference previewImageElem2;
    private InputFile? inputFile3;
    private ElementReference previewImageElem3;
    private InputFile? inputFile4;
    private ElementReference previewImageElem4;
    private async Task UploadFile1(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(
        "previewImage", inputFile1!.Element, previewImageElem1);
        var result = await _imageService.UploadItemImage(e.File);
    }
    private async Task UploadFile2(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(
        "previewImage", inputFile2!.Element, previewImageElem2);
        var result = await _imageService.UploadItemImage(e.File);
    }
    private async Task UploadFile3(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(
        "previewImage", inputFile3!.Element, previewImageElem3);
        var result = await _imageService.UploadItemImage(e.File);
    }
    private async Task UploadFile4(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync(
        "previewImage", inputFile4!.Element, previewImageElem4);
        var result = await _imageService.UploadItemImage(e.File);
    }


    private async Task<(string, byte[])> ResizeImage(IBrowserFile file)
    {
        // Optional: limit size to avoid reading too much
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 500, 600);

        using var stream = file.OpenReadStream(50 * 1024 * 1024); // max 500KB
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);

        var bytes = ms.ToArray();
        return new($"data:{file.ContentType};base64,{Convert.ToBase64String(bytes)}", bytes);
    }

}