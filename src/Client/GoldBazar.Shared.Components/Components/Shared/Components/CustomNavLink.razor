@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager

<a href="@Href" class="@Class @CssClass" @onclick="OnClick" aria-current="@(IsActive ? "page" : null)">
    @ChildContent
</a>

@code {
    [Parameter] public required string Href { get; set; }
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ActiveClass { get; set; } = "active";
    [Parameter] public string InactiveClass { get; set; } = "";
    [Parameter] public NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;

    private string CssClass => IsActive ? ActiveClass : InactiveClass;

    private bool IsActive
    {
        get
        {
            var currentUri = new Uri(NavigationManager.Uri);
            var targetUri = new Uri(NavigationManager.ToAbsoluteUri(Href).ToString());

            var currentPath = NormalizePath(currentUri.AbsolutePath);
            var targetPath = NormalizePath(targetUri.AbsolutePath);

            return Match == NavLinkMatch.All
            ? string.Equals(currentPath, targetPath, StringComparison.OrdinalIgnoreCase)
            : currentPath.StartsWith(targetPath, StringComparison.OrdinalIgnoreCase);
        }
    }

    private string NormalizePath(string path)
    {
        if (string.IsNullOrEmpty(path))
            return "/";

        var normalized = path.TrimEnd('/');
        return normalized == "" ? "/" : normalized;
    }

    private Task OnClick(MouseEventArgs e)
    {
        NavigationManager.NavigateTo(Href);
        return Task.CompletedTask;
    }
}
