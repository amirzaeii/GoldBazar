@page "/auth/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using GoldBazar.Client.Web.Components.Pages.Auth.Components

<PageTitle>GOLD BAZAR - Login</PageTitle>

@if (loginStep == LoginStep.LoginForm)
{
    <LoginForm OnValidSubmit="onValidLogin" />
}
else
{
    <OTPVerification Mobile="@loginModel.Mobile" BackUrl="/auth/login" TimerInSeconds="60" OnCompleted="onValidOTP"
        OnResendRequested="@(() => {})" />
}

@code {
    private LoginModel loginModel { get; set; } = default!;

    enum LoginStep
    {
        LoginForm,
        OTPForm,
    };

    LoginStep loginStep { get; set; } = LoginStep.LoginForm;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private async Task<FormResult> onValidLogin(LoginModel loginModel)
    {
        var result = await LoginAsync(loginModel);
        if (result.Success)
        {
            this.loginModel = loginModel;
            loginStep = LoginStep.OTPForm;
            await InvokeAsync(StateHasChanged);
        }

        return result;
    }

    private async Task<FormResult> onValidOTP(string code)
    {
        var result = await OTPAsync(code);
        if (result.Success)
        {
            @* TODO: Store user and related token to client *@
            NavigationManager.NavigateTo("/", forceLoad: true);
        }

        return result;
    }

    public Task<FormResult> LoginAsync(LoginModel model)
    {
        var errors = new Dictionary<string, string>();

        if (model.Password != "password123")
        {
            errors.Add(nameof(model.Password), "تێپەڕەوشە نادروستە.");
        }

        if (model.Mobile != "1234567890")
        {
            errors.Add(nameof(model.Mobile), "ژمارەی مۆبایل نادروستە.");
        }

        if (errors.Count == 0)
        {
            return Task.FromResult(new FormResult
            {
                Success = true,
                Errors = errors,
                Message = "چوونەژوورەوە سەرکەوتووبوو"
            });
        }

        return Task.FromResult(new FormResult
        {
            Success = false,
            Errors = errors,
            Message = "چوونەژوورەوە ناکام بوو"
        });
    }

    public Task<FormResult> OTPAsync(string code)
    {
        @* TODO: create request base you endpoint and send it *@

        if (code != "7890")
        {
            return Task.FromResult(new FormResult
            {
                Success = false,
                Errors = new(),
                Message = "ئەو کۆدەی داخڵ کراوە هەڵەیە."
            });
        }

        return Task.FromResult(new FormResult
        {
            Success = true,
            Errors = new(),
            Message = "چوونەژوورەوە سەرکەوتووبوو"
        });
    }
}