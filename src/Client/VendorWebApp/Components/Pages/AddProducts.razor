@page "/add"
@inject ILogger<AddProducts> Logger
@inject CatalogService CatalogService
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager Nav
@layout NavLayout
@rendermode InteractiveServer

<div class="tabs-container">
    <div class="tabs-header">@localizer[nameof(Resource.AddProductLabel)]</div>
    <div class="tabs">
        <div class="tab @((currentStep == 0) ? "active" : "")" @onclick="() => SetStep(0)">
            @localizer[nameof(Resource.MediaLabel)]
        </div>
        <div class="tab @((currentStep == 1) ? "active" : "")" @onclick="() => SetStep(1)">
            @localizer[nameof(Resource.FeaturesLabel)]
        </div>
        <div class="tab @((currentStep == 2) ? "active" : "")" @onclick="() => SetStep(2)">
            @localizer[nameof(Resource.PricingLabel)]
        </div>
    </div>
    <div class="tab-content">
        <EditForm Model="@newItem" OnValidSubmit="CreateItem" Enhance>
            <DataAnnotationsValidator />
            @if (currentStep == 0)
            {
              <label>@localizer[nameof(Resource.AddImagesLabel)]</label>
                    <div class="image-upload-container">
                        <label class="upload-button">
                            <InputFile OnChange="UploadFile" multiple accept=".png,.jpg,.jpeg"/>

                            @if (string.IsNullOrEmpty(newItem.MainPhoto))
                            {
                                <div class="upload-placeholder"><img src="Icons/add-image.svg" /></div>
                            }
                            else
                            {
                                <img src="@newItem.MainPhoto" alt="Product Image" class="upload-preview" />
                            }
                        </label>
                    </div>
            }
            else if (currentStep == 1)
            {
                <div class="features-container">
                    <div class="dropdown-group">
                        <div class="dropdown">
                            <label>@localizer[nameof(Resource.ProductTypeLabel)]</label>
                            <InputSelect @bind-Value="newItem.TypeId">
                                @foreach (var type in ProductTypes)
                                {
                                    <option value="@type.Id">@type.Name</option>
                                }
                            </InputSelect>
                            <div class="dropdown">
                                <label>@localizer[nameof(Resource.MetalLabel)]</label>
                                <InputSelect @bind-Value="newItem.MetalId">
                                    @foreach (var metal in Metals)
                                    {
                                        <option value="@metal.Id">@metal.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="dropdown-group">
                            <div class="dropdown">
                                <label>@localizer[nameof(Resource.StyleLabel)]</label>
                                <InputSelect @bind-Value="newItem.StyleId">
                                    @foreach (var style in Styles)
                                    {
                                        <option value="@style.Id">@style.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="dropdown">
                                <label>@localizer[nameof(Resource.OccasionLabel)]</label>
                                <InputSelect @bind-Value="newItem.OccasionId">
                                    @foreach (var occasion in Occasions)
                                    {
                                        <option value="@occasion.Id">@occasion.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="dropdown-group">
                            <div class="dropdown">
                                <label>@localizer[nameof(Resource.MaterialLabel)]</label>
                                <InputSelect @bind-Value="newItem.MaterialId">
                                    @foreach (var material in Materials)
                                    {
                                        <option value="@material.Id">@material.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="description-box">
                            <label>@localizer[nameof(Resource.CaptionLabel)]</label>
                            <InputText type="text" @bind-Value="newItem.Caption"></InputText>
                        </div>
                        <div class="description-box">
                            <label>@localizer[nameof(Resource.FeaturesLabel)]</label>
                            <InputTextArea @bind-Value="newItem.Description"></InputTextArea>
                        </div>
                    </div>
                </div>
            }
            else if (currentStep == 2)
            {
                <div class="pricing-container">
                    <div class="input-group">
                        <div class="input-field">
                            <label>@localizer[nameof(Resource.WeightInGramsLabel)]</label>
                            <InputNumber type="number" @bind-Value="newItem.Weight" />
                            <ValidationMessage For="@(() => newItem.Weight)" />
                        </div>
                        <div class="input-field">
                            <label>@localizer[nameof(Resource.LengthInMillimetersLabel)]</label>
                            <InputNumber type="number" @bind-Value="newItem.Size" />
                            <ValidationMessage For="@(() => newItem.Size)" />
                        </div>
                    </div>
                    <div class="input-group">
                        <div class="input-field">
                            <label>@localizer[nameof(Resource.QuantityLabel)]</label>
                            <InputNumber type="number" @bind-Value="newItem.Quantity" />
                            <ValidationMessage For="@(() => newItem.Quantity)" />
                        </div>
                        <div class="input-field">
                            <label>@localizer[nameof(Resource.PricePerGramLabel)]</label>
                            <InputNumber type="number" @bind-Value="newItem.CostPerGram" />
                            <ValidationMessage For="@(() => newItem.CostPerGram)" />
                        </div>
                        <div class="input-field">
                            <label>@localizer[nameof(Resource.DiscountLabel)]</label>
                            <InputNumber type="number" @bind-Value="newItem.Discount" />
                            <ValidationMessage For="@(() => newItem.Discount)" />
                        </div>
                    </div>
                </div>
                <button type="submit">  @localizer[nameof(Resource.SubmitLabel)]</button>
            }
            <ValidationSummary />
        </EditForm>
    </div>
    </div>

@code {
     
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 3;
    private IBrowserFile? file;
    private List<string> errors;

    private int currentStep = 0;

    private void SetStep(int step)
    {
        currentStep = step;
    }

    CatalogItem newItem = new CatalogItem();
    private List<DropdownItem> ProductTypes = new();
    private List<DropdownItem> Metals = new();
    private List<DropdownItem> Styles = new();
    private List<DropdownItem> Occasions = new();
    private List<DropdownItem> Materials = new();
    protected override async Task OnInitializedAsync()
    {

        var allTypes = await CatalogService.GetTypes();
        ProductTypes = allTypes.Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Metals = (await CatalogService.GetCatalogDataAsync("metals"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Styles = (await CatalogService.GetCatalogDataAsync("styles"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Occasions = (await CatalogService.GetCatalogDataAsync("occasions"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Materials = (await CatalogService.GetCatalogDataAsync("materials"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();
    }

    async Task CreateItem()
    {
        try
        {
            var success = await CatalogService.AddProduct(newItem);
            if (success)
            {
                Console.WriteLine("Product added successfully.");
                Nav.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Failed to add product.");
 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            return;
        }

        var response = await CatalogService.UploadProductImage(e.File);
        newItem.MainPhoto = response.Replace('"',' ').Trim();
    }
}


  

