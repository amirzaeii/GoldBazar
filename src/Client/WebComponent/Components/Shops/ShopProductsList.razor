@inject ICatalogService CatalogService
@inject IProductImageUrlProvider ImageProvider
@inject IShopService ShopService

@if (shopItems == null)
{
    <p>Loading items...</p>
}
else if (!shopItems.Any())
{
    <p>No items available from this goldsmith.</p>
}
else
{
    <div class="shop-products">
        <h3 class="shop-products-title">
            More items from @goldsmithName
        </h3>
        <div class="product-grid">
            @foreach (var product in shopItems)
            {
                <a href="/product/@product.Id" class="product-card">
                    <div class="badge-container">
                        @if (product.Discount > 0)
                        {
                            <div class="badge">
                                <img src="assets/Icons/offerFill.svg" alt="Discount">
                            </div>
                        }
                    </div>
                    <div class="product-image">
                        <img src="@ImageProvider.GetProductImageUrl(product)" alt="@product.Caption" />
                    </div>
                    <div class="product-info">
                        <h3 class="product-title">@product.Caption</h3>
                        <div class="price-container">
                            @if (product.Discount > 0)
                            {
                                <span class="original-price">@product.OldPrice.ToString("C")</span>
                            }
                            <span class="current-price">@product.Price.ToString("C")</span>
                        </div>
                        <div class="jeweler-container">
                            <span class="jeweler-name">@goldsmithName</span>
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int ShopId { get; set; }
    [Parameter] public int ExcludeProductId { get; set; }

    List<CatalogItem>? shopItems;
    string goldsmithName = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch shop name
        var shop = await ShopService.GetShopById(ShopId);
        goldsmithName = shop?.Name ?? "Goldsmith";

        // Fetch products from the shop, excluding the current product
        shopItems = (await ShopService.GetProductsByShopId(ShopId))
                    .Where(p => p.Id != ExcludeProductId)
                    .ToList();
    }
}
