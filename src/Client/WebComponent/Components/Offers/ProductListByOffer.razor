@inject ICatalogService CatalogService
@inject NavigationManager Nav
@attribute [StreamRendering]

<div class="product-grid">
    @if (discountedProducts is null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var product in discountedProducts.Data)
        {
            <ProductCard Item="product" />
        }
        <div class="page-links">
            @foreach (var pageIndex in GetVisiblePageIndexes(discountedProducts))
            {
                <NavLink ActiveClass="active-page" Match="@NavLinkMatch.All" href="@Nav.GetUriWithQueryParameter("page", pageIndex == 1 ? null : pageIndex)">
                    @pageIndex
                </NavLink>
            }
        </div>
    }
</div>

@code {
    CatalogResult? discountedProducts;
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    private const int PageSize = 10;

    static IEnumerable<int> GetVisiblePageIndexes(CatalogResult result)
        => Enumerable.Range(1, (int)Math.Ceiling(1.0 * result.Count / PageSize));

    protected override async Task OnInitializedAsync()
    {
        discountedProducts = new CatalogResult(
            Page.GetValueOrDefault(1) - 1,
            PageSize,
            0,
            new List<CatalogItem>()
        );

        var items = await CatalogService.GetDiscountedCatalogItems(
            Page.GetValueOrDefault(1) - 1,
            PageSize
        );

        discountedProducts = new CatalogResult(
            Page.GetValueOrDefault(1) - 1,
            PageSize,
            items.Count(),
            items.ToList()
        );
    }
}
