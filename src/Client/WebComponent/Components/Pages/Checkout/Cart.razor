@page "/cart"
@layout MainLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.Threading
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager Nav
@inject BasketState Basket
@inject IProductImageUrlProvider ImageProvider
@inject ICatalogService CatalogService

<div class="container">
    <header class="header">
        <h1>@localizer[nameof(Resource.MyCartHeader)]</h1>
    </header>

    @if (basketItems == null)
    {
        <p>Loading your cart…</p>
    }
    else if (!basketItems.Any())
    {
        <p>Your cart is empty.</p>
    }
    else
    {
        @foreach (var storeGroup in basketItems.GroupBy(x => x.StoreName))
        {
            
            <div class="outer-container">
                <!-- Store header -->
                <h2 class="store-header">@storeGroup.Key</h2>
                <hr class="store-divider" />
                <div class="products">
                    @foreach (var item in storeGroup)
                    {
                        <div class="product-card" @key="item.ProductId">
                            <img class="product-image"
                                 src="@ImageProvider.GetProductImageUrl(item.ProductId)"
                                 alt="@item.ProductName" />

                            <div class="product-details">
                                <div class="name-price">
                                    <p class="product-title">@item.ProductName</p>
                                    <span class="product-price">@item.UnitPrice.ToString("C")</span>
                                </div>
                               @*  <div class="quantity-controls">
                                    <input type="number"
                                           min="0"
                                           @bind="item.Quantity"
                                           @bind:event="onchange" />
                                </div> *@
                                <div class="quantity-controls">
                                    <button type="button"
                                            class="decrement-btn"
                                            @onclick="() => item.Quantity = Math.Max(item.Quantity - 1, 0)">
                                        <img src="_content/WebComponent/assets/Icons/bin.svg" />
                                    </button>

                                    <input type="number"
                                           min="0"
                                           @bind="item.Quantity"
                                           @bind:event="onchange" />

                                    <button type="button"
                                            class="increment-btn"
                                            @onclick="() => item.Quantity++">
                                        <img src="_content/WebComponent/assets/Icons/inc.svg" />
                                    </button>
                                </div>

                            </div>
                        </div>
                    }
                </div>

                @* Per-store total + checkout *@
                <div class="total-section">
                    <div class="total-price-container">
                        <span class="total-price-label">Total:</span>
                        <span class="total-price">@storeGroup.Sum(i => i.Quantity * i.UnitPrice).ToString("C")</span>
                    </div>
                    <a class="checkout-button"
                       href="/checkout?store=@Uri.EscapeDataString(storeGroup.Key)">
                        <img src="_content/WebComponent/assets/Icons/cartwhite.svg"
                             alt="Cart"
                             class="checkout-icon" />
                        Checkout
                    </a>

                </div>

            </div>
        }

    }
</div>

@code {
    private List<BasketItem>? basketItems;
    private decimal TotalPrice
      => basketItems?.Sum(i => i.Quantity * i.UnitPrice) ?? 0m;

    // For per-item debounce
    private readonly Dictionary<int, CancellationTokenSource> _debounceTokens =
      new();

    protected override async Task OnInitializedAsync()
    {
        // initial fetch
        var items = (await Basket.GetBasketItemsAsync()).ToList();

        // load store names (unchanged)…
        var ids = items.Select(i => i.ProductId).Distinct();
        var cats = await CatalogService.GetCatalogItems(ids);
        var lookup = cats.ToDictionary(c => c.Id, c => c.ShopName);
        items.ForEach(i =>
            i.StoreName = lookup.GetValueOrDefault(i.ProductId, "Unknown Store")
        );

        // wire up inline setter callback **with zero-removal**:
        items.ForEach(item =>
            item.OnQuantityChanged = (bi, qty) =>
            {
                if (qty == 0)
                {
                    // remove from the local list
                    basketItems?.Remove(bi);
                }

                // always re-render immediately
                StateHasChanged();

                // then persist (adds/removes server-side) after debounce
                DebouncePersist(bi.ProductId, qty);
            }
        );

        basketItems = items;
    }


    private void DebouncePersist(int productId, int newQty)
    {
        if (_debounceTokens.TryGetValue(productId, out var oldCts))
        {
            oldCts.Cancel();
            oldCts.Dispose();
        }

        var cts = new CancellationTokenSource();
        _debounceTokens[productId] = cts;

        _ = PersistAfterDelay(productId, newQty, cts.Token);
    }

    private async Task PersistAfterDelay(int productId, int newQty, CancellationToken token)
    {
        try
        {
            await Task.Delay(500, token);
            await Basket.SetQuantityAsync(productId, newQty);
        }
        catch (TaskCanceledException)
        {
            // expected if user changes again within debounce window
        }
    }
}