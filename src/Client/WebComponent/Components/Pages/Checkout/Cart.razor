@page "/cart"
@using Microsoft.AspNetCore.Components.Forms
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager Nav
@inject BasketState Basket
@inject IProductImageUrlProvider ImageProvider
@attribute [StreamRendering]

<div class="container">
    <header class="header">
        <!--  <h1>@localizer[nameof(MyProductsHeader.Action)]</h1>-->
        <h1>@localizer[nameof(Resource.MyCartHeader)]</h1>
    </header>
    @if(basketItems == null){

    }
    else{    
            <div class="products">
                @foreach (var product in basketItems)
                {
                    var quantity = CurrentOrPendingQuantity(product.ProductId, product.Quantity);
                    <div class="product-card">
                        <img src="@ImageProvider.GetProductImageUrl(product.ProductId)" alt="@product.ProductName" class="product-image">
                        <div class="product-details">
                            <div class="name-price">
                                <p class="product-title">@product.ProductName</p>
                                <span class="product-price">@product.UnitPrice.ToString("C")</span>
                            </div>
                            <div class="quantity-controls">
                                  <form method="post" data-enhance>
                                        <input type="hidden" name="_handler" value="update-cart" />
                                        <AntiforgeryToken />
                                        <input aria-label="product quantity" type="number" name="UpdateQuantityValue" value="@quantity" min="0" />
                                        <button type="submit" 
                                                class="button"
                                                name="UpdateQuantityId" 
                                                value="@product.ProductId">
                                            Update
                                        </button>                                        
                                    </form>
                            </div>
                        </div>
                    </div>
                }

                <div class="total-section">
                    <div class="total-price-container">
                        <span class="total-price-label">@localizer[nameof(Resource.TotalPriceLabel)]</span>
                        <span class="total-price">@TotalPrice!.Value.ToString("C")</span>
                    </div>
                    <div>
                        <a href="/checkout" class="button button-primary" style="width: 100%; text-align: center; background-color: #0d11e5; color: white;">
                            @localizer[nameof(Resource.CheckoutLabel)]
                        </a>
                    </div>                  
                </div>
            </div>       
    }
     </div>
     <form @formname="update-cart" @onsubmit="@UpdateQuantityAsync"></form>
@code {
    private IReadOnlyCollection<BasketItem>? basketItems;

    [SupplyParameterFromForm]
    public int? UpdateQuantityId { get; set; }

    [SupplyParameterFromForm]
    public int? UpdateQuantityValue { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        basketItems = await Basket.GetBasketItemsAsync();
    }   
    private decimal? TotalPrice => basketItems?.Sum(i => i.Quantity * i.UnitPrice);
    private decimal? TotalQuantity => basketItems?.Sum(i => i.Quantity);
    // While an update post is in process, we want to show the pending quantity, not the one
    // that is committed to the cart (otherwise the UI briefly shows the old data)
    private int CurrentOrPendingQuantity(int productId, int cartQuantity)
        => UpdateQuantityId.GetValueOrDefault(-1) == productId
        ? UpdateQuantityValue!.Value
        : cartQuantity;

    private async Task UpdateQuantityAsync()
    {
        var id = UpdateQuantityId!.Value;
        var quantity = UpdateQuantityValue!.Value;
        await Basket.SetQuantityAsync(id, quantity);
        basketItems = await Basket.GetBasketItemsAsync();
    }
}