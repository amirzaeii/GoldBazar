@page "/filters-result/{ItemTypeId:int?}"
@using WebComponent.Components.Filter
@inject NavigationManager Navigation
@inject IFilterService FilterService
@inject ICatalogService CatalogService
@inject IStringLocalizer<Resource> localizer
@rendermode InteractiveServer

<div class="search-bar-container">
    <div class="search-bar">
        <input type="text" placeholder="@localizer[nameof(Resource.SearchLabel)]">
        <button type="submit">
            <img src="_content/WebComponent/assets/icons/search.png" alt="Search">
        </button>
    </div>
</div>

<div class="filter-sort-container">
    <button class="filter-button" @onclick="@(() => Navigation.NavigateTo("/filters"))">
        <div class="filter-link">
            <span>@localizer[nameof(Resource.FilterLabel)]</span>
            <img src="_content/WebComponent/assets/icons/filter.png" alt="Filter">
        </div>
    </button>

    <span class="divider"></span>
    
    <select class="sort-dropdown" @onchange="(e) => OnOptionChanged(e.Value?.ToString())">
        <option class="sort-option" value="Latest" selected="@(selectedOption == "Latest")">@localizer[nameof(Resource.SortByLabel)]</option>
        <option class="sort-option" value="HighToLow" selected="@(selectedOption == "HighToLow")">@localizer[nameof(Resource.PriceHighToLow)]</option>
        <option class="sort-option" value="LowToHigh" selected="@(selectedOption == "LowToHigh")">@localizer[nameof(Resource.PriceLowToHigh)]</option>
    </select>
</div>

<div class="product-grid">
    @if (ItemTypeId.HasValue && ItemTypeId > 0)
    {
        <div class="product-grid">
            <ProductListByType ItemTypeId="ItemTypeId.Value" />
        </div>
    }
    else if (Products != null && Products.Any())
    {
        <div class="product-grid">
            <ProductListByFilter Products="Products" />
        </div>
    }
    else
    {
        <div class="product-grid">
            <p>@localizer[nameof(Resource.EmptyFilterWarningLabel)]</p>
        </div>
    }
</div>

@code {
    private string selectedOption = "Latest";
    private List<CatalogItem> Products { get; set; } = new();
    [Parameter]
    public int? ItemTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParameters.HasKeys())
        {
            var selectedFilters = new CompositeFilterDto
            {
                Material = queryParameters["Material"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                Metal = queryParameters["Metal"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                Occasion = queryParameters["Occasion"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>(),
                Style = queryParameters["Style"]?.Split(',').Select(int.Parse).ToList() ?? new List<int>()
            };

            Products = (await FilterService.FilterCatalogItemsAsync(selectedFilters)).ToList();
        }
    }

    private void OnOptionChanged(string? option)
    {
        if (!string.IsNullOrEmpty(option))
        {
            selectedOption = option;
            Console.WriteLine($"Selected option: {selectedOption}");
        }
    }
}
