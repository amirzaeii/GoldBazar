@page "/filters"
@inject IFilterService FilterService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@layout EmptyLayout
@inject IStringLocalizer<Resource> localizer
@rendermode InteractiveServer

@if (FilterDictionary.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <div class="app-bar">
        <button onclick="history.go(-1)"></button>
        <span class="title">
            @localizer[nameof(Resource.SortAndFilterLabel)]</span>
    </div>

    <div class="filter-wrapp">
        <div class="left-column">
            @foreach (var filter in FilterDictionary)
            {
                <button class="category" @onclick="() => ShowSubcategories(filter.Key)">
                    @filter.Value
                </button>
            }
        </div>


        <div class="right-column">
            <div class="subcategories">
                @if (SelectedFilter != null)
                {
                    @foreach (var subcategoryItem in Subcategories[SelectedFilter])
                    {
                        <div class="subcategory">
                            <input type="checkbox"
                                   id="checkbox-@SelectedFilter-@subcategoryItem.Id"
                                   value="@subcategoryItem.Id"
                                   checked="@SelectedCheckboxes[SelectedFilter].Contains(subcategoryItem.Id)"
                                   @onchange="(e) => ToggleCheckbox(SelectedFilter, subcategoryItem.Id)" />
                            <label for="checkbox-@SelectedFilter-@subcategoryItem.Id">@subcategoryItem.Name</label>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <div class="bottom-bar">
        <button class="submit" @onclick="Submit">Search</button>
        @* <button class="clear-all" @onclick="ClearAllCheckboxes">Clear</button> *@
    </div>
}

@code {
    Dictionary<string, string> FilterDictionary = new();
    Dictionary<string, List<(int Id, string Name)>> Subcategories = new();
    Dictionary<string, HashSet<int>> SelectedCheckboxes = new(); // Tracks selected IDs
    string SelectedFilter;
    private List<CatalogItem> Products { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Populate Subcategories
        var materials = await FilterService.GetCatalogDataAsync("materials");
        var metals = await FilterService.GetCatalogDataAsync("metals");
        var occasions = await FilterService.GetCatalogDataAsync("occasions");
        var styles = await FilterService.GetCatalogDataAsync("styles");

        Subcategories["Material"] = materials.Select(m => (m.Id, m.Name)).ToList();
        Subcategories["Metal"] = metals.Select(m => (m.Id, m.Name)).ToList();
        Subcategories["Occasion"] = occasions.Select(o => (o.Id, o.Name)).ToList();
        Subcategories["Style"] = styles.Select(s => (s.Id, s.Name)).ToList();

        FilterDictionary["Material"] = "Materials";
        FilterDictionary["Metal"] = "Metals";
        FilterDictionary["Occasion"] = "Occasions";
        FilterDictionary["Style"] = "Styles";

        // Initialize SelectedCheckboxes
        foreach (var key in FilterDictionary.Keys)
        {
            SelectedCheckboxes[key] = new HashSet<int>();
        }

        // Parse query parameters and populate SelectedCheckboxes
        if (queryParameters["Material"] != null)
        {
            SelectedCheckboxes["Material"] = new HashSet<int>(queryParameters["Material"].Split(',').Select(int.Parse));
        }

        if (queryParameters["Metal"] != null)
        {
            SelectedCheckboxes["Metal"] = new HashSet<int>(queryParameters["Metal"].Split(',').Select(int.Parse));
        }

        if (queryParameters["Occasion"] != null)
        {
            SelectedCheckboxes["Occasion"] = new HashSet<int>(queryParameters["Occasion"].Split(',').Select(int.Parse));
        }

        if (queryParameters["Style"] != null)
        {
            SelectedCheckboxes["Style"] = new HashSet<int>(queryParameters["Style"].Split(',').Select(int.Parse));
        }
    }


    private void ClearAllCheckboxes()
    {
        if (!string.IsNullOrEmpty(SelectedFilter) && SelectedCheckboxes.ContainsKey(SelectedFilter))
        {
            SelectedCheckboxes[SelectedFilter].Clear();
        }

        StateHasChanged(); // Trigger re-render
    }

    private void ToggleCheckbox(string filterKey, int id)
    {
        if (SelectedCheckboxes.ContainsKey(filterKey))
        {
            if (SelectedCheckboxes[filterKey].Contains(id))
            {
                SelectedCheckboxes[filterKey].Remove(id);
            }
            else
            {
                SelectedCheckboxes[filterKey].Add(id);
            }
        }
    }
    private void ShowSubcategories(string filterKey)
    {
        SelectedFilter = filterKey;
        StateHasChanged(); // Trigger UI update
    }

    private void Submit()
    {
        var queryParameters = new List<string>();

        if (SelectedCheckboxes["Material"].Any())
        {
            queryParameters.Add($"Material={string.Join(",", SelectedCheckboxes["Material"])}");
        }

        if (SelectedCheckboxes["Metal"].Any())
        {
            queryParameters.Add($"Metal={string.Join(",", SelectedCheckboxes["Metal"])}");
        }

        if (SelectedCheckboxes["Occasion"].Any())
        {
            queryParameters.Add($"Occasion={string.Join(",", SelectedCheckboxes["Occasion"])}");
        }

        if (SelectedCheckboxes["Style"].Any())
        {
            queryParameters.Add($"Style={string.Join(",", SelectedCheckboxes["Style"])}");
        }

        var queryString = string.Join("&", queryParameters);
        var targetUrl = $"/filters-result?{queryString}";

        Console.WriteLine($"Navigating to: {targetUrl}");

        // Navigate to the FiltersResult page with the query string
        Navigation.NavigateTo(targetUrl);
    }



}
