@page "/filters"
@using Catalog.Infrastructure
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject ICatalogService CatalogService
@inject IStringLocalizer<Resource> localizer
@rendermode InteractiveServer

<div class="form-header">
    <h2>@localizer[nameof(Resource.SortAndFilterLabel)]</h2>
</div>

<EditForm Model="@SelectedFilters" OnValidSubmit="ApplyFilters">
    <DataAnnotationsValidator />

    <!-- Weight Inputs -->
    <div class="form-group">
        <label>@localizer[nameof(Resource.MinWeightLabel)]</label>
        <InputNumber @bind-Value="SelectedFilters.MinWeight" />
    </div>

    <div class="form-group">
        <label>@localizer[nameof(Resource.MaxWeightLabel)]</label>
        <InputNumber @bind-Value="SelectedFilters.MaxWeight" />
    </div>

    <!-- Dropdown Filters -->
    <div class="form-group">
        <label>@localizer[nameof(Resource.MetalLabel)]</label>
        <InputSelect @bind-Value="SelectedFilters.Metals" multiple class="form-control">
            @foreach (var metal in Metals)
            {
                <option value="@metal.Id">@metal.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>@localizer[nameof(Resource.StyleLabel)]</label>
        <InputSelect @bind-Value="SelectedFilters.Styles" multiple class="form-control">
            @foreach (var style in Styles)
            {
                <option value="@style.Id">@style.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>@localizer[nameof(Resource.OccasionLabel)]</label>
        <InputSelect @bind-Value="SelectedFilters.Occasions" multiple class="form-control">
            @foreach (var occasion in Occasions)
            {
                <option value="@occasion.Id">@occasion.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>@localizer[nameof(Resource.MaterialLabel)]</label>
        <InputSelect @bind-Value="SelectedFilters.Materials" multiple class="form-control">
            @foreach (var material in Materials)
            {
                <option value="@material.Id">@material.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-actions">
        <button type="submit" class="apply-button">@localizer[nameof(Resource.SubmitLabel)]</button>
        <button type="button" class="clear-button" @onclick="ClearFilters">@localizer[nameof(Resource.ClearFiltersLabel)]</button>
    </div>
</EditForm>


@code {
    private Dtos.CompositeFilterDto SelectedFilters = new Dtos.CompositeFilterDto();
    private List<ItemDto> FilteredItems = new();

    private List<DropdownItem> Materials = new();
    private List<DropdownItem> Metals = new();
    private List<DropdownItem> Occasions = new();
    private List<DropdownItem> Styles = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch dropdown data
        Metals = await GetDropdownData("metals");
        Styles = await GetDropdownData("styles");
        Occasions = await GetDropdownData("occasions");
        Materials = await GetDropdownData("materials");

        // Fetch and map other dropdown data
        Metals = (await CatalogService.GetCatalogDataAsync("metals"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Styles = (await CatalogService.GetCatalogDataAsync("styles"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Occasions = (await CatalogService.GetCatalogDataAsync("occasions"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();

        Materials = (await CatalogService.GetCatalogDataAsync("materials"))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name }).ToList();
    }

    private async Task<List<DropdownItem>> GetDropdownData(string type)
    {
        return (await CatalogService.GetCatalogDataAsync(type))
            .Select(x => new DropdownItem { Id = x.Id, Name = x.Name })
            .ToList();
    }

    private async Task ApplyFilters()
    {
        try
        {
            // Build the query string from the selected filters
            var queryString = new System.Text.StringBuilder("?");

            if (SelectedFilters.MinWeight > 0)
                queryString.Append($"minWeight={SelectedFilters.MinWeight}&");

            if (SelectedFilters.MaxWeight > 0)
                queryString.Append($"maxWeight={SelectedFilters.MaxWeight}&");

            if (SelectedFilters.Metals.Any())
                queryString.Append($"metals={string.Join(",", SelectedFilters.Metals)}&");

            if (SelectedFilters.Styles.Any())
                queryString.Append($"styles={string.Join(",", SelectedFilters.Styles)}&");

            if (SelectedFilters.Occasions.Any())
                queryString.Append($"occasions={string.Join(",", SelectedFilters.Occasions)}&");

            if (SelectedFilters.Materials.Any())
                queryString.Append($"materials={string.Join(",", SelectedFilters.Materials)}&");

            // Remove the trailing '&' or '?' if no filters are applied
            if (queryString.Length > 1)
                queryString.Length--; // Remove the last character

            // Navigate to the list component's page with the query string
            Navigation.NavigateTo($"/products{queryString}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying filters: {ex.Message}");
        }
    }

    private void ClearFilters()
    {
        // Reset the SelectedFilters object
        SelectedFilters = new Dtos.CompositeFilterDto();
        // Clear the FilteredItems list
        FilteredItems.Clear();
    }
}
